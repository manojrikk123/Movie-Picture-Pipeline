# Workflow name
name: Backend Continuous Deployment

# Triggers for the workflow
on:
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:
    
  # Automatic trigger on pull request events targeting the main branch
  push:
    branches:
        - main
      

# Jobs defined in the workflow
jobs:

  backend-cd-test:
    runs-on: ubuntu-latest
    steps:
      #checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      #setup python and cache
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"


      #printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      #Install pipenv
      - name: Install pipenv
        run: cd starter/backend && pip install pipenv
      
      #install dependencies
      - name: install dependencies
        run: cd starter/backend && pipenv install 

      #Run tests
      - name: Run tests    
        run: cd starter/backend && pipenv run test 
      
  backend-cd-lint:
    runs-on: ubuntu-latest
    steps:
      #checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      #setup python and cache
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      #printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      #Install pipenv
      - name: Install pipenv
        run: cd starter/backend && pip install pipenv
      
      #install dependencies
      - name: install dependencies
        run: cd starter/backend && pipenv install --dev

      #Run linter
      - name: Run linter    
        run: cd starter/backend && pipenv run flake8
  
  backend-cd-build:
    needs: [backend-cd-test, backend-cd-lint]
    if: success()
    runs-on: ubuntu-latest
    steps:
      #checkout code
      - name: Checkout code
        uses: actions/checkout@v3
    
      #configure AWS credentials
      - name: AWS configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      #Login to ECR
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      #Build and push to ECR
      - name: Build, tag, and push docker image to Amazon ECR Public
        run: |
          docker build -t backend ./starter/backend/ 
          docker tag backend:${GITHUB_SHA::7} ${{ vars.BACKEND_ECR }}:${GITHUB_SHA::7}
          docker push ${{ vars.BACKEND_ECR }}:${GITHUB_SHA::7}

      #Deploy to EKS
      - name: Deploying to EKS
        env:
          REPOSITORY: backend #name of the pod

        run: |
          aws eks update-kubeconfig --name ${{ vars.CLUSTER_NAME }}
          kubectl apply -f ./starter/backend/k8s/deployment.yaml
          kubectl set image deployment/$REPOSITORY $REPOSITORY=${{ vars.BACKEND_ECR }}:${GITHUB_SHA::7}
          kubectl apply -f ./starter/backend/k8s/service.yaml
